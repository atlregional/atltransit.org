{"version":3,"sources":["locale.js","nav.js","planner-widget.js","schedules-widget.js","utilities.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/sbfile":"atltransit.js","sourcesContent":["var whitelabel_prefix = 'http://opentrip.atlantaregion.com/otp-rest-servlet/';\n\nvar whitelabel_minDate = new Date(2014, 02, 08);\nvar whitelabel_maxDate = new Date(2020, 03, 30);\n\nvar Locale = {};\n\nLocale.dateFormat = 'mm-dd-yy';\nLocale.timeFormat = 'h:mma';\nLocale.dateAriaLabel = 'Date, use Ctrl en arrow keys to navigate, enter to choose';\nLocale.loading = \"Loading...\";\nLocale.edit = \"Change trip\";\nLocale.plan = \"Plan trip\";\nLocale.geocoderInput = \"Enter starting address, or click on the map...\";\nLocale.originInput = \"Enter starting address, or click on the map...\";\nLocale.destinationInput = \"Enter destination...\";\nLocale.startpointEmpty = \"No starting point entered\";\nLocale.noStartpointSelected = \"No starting point selected\";\nLocale.destinationEmpty = \"No destination entered\";\nLocale.noDestinationSelected = \"No destination selected\";\nLocale.noValidDate = \"Enter a valid date\";\nLocale.noValidTime = \"Enter a valid time\";\nLocale.dateTooEarly = function ( minDate8601 ) { return \"This trip planner works for travel dates starting \"+minDate8601.split('-').reverse().join('-'); };\nLocale.dateTooLate = function ( maxDate8601 ) { return \"This trip planner works for travel dates till \"+maxDate8601.split('-').reverse().join('-'); };\nLocale.from = \"From\";\nLocale.via = \"Via\";\nLocale.to = \"To\";\nLocale.date = \"Date\";\nLocale.time = \"Time\";\nLocale.months = ['January','February','March','April','May','June','July','August','September','October','November','December'];\nLocale.days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\nLocale.daysMin = ['Su','Mo','Tu','We','Th','Fr','Sa'];\nLocale.earlier = 'Earlier';\nLocale.later = 'Later';\nLocale.noAdviceFound = 'No valid trips found';\nLocale.walk = 'Walk';\nLocale.platformrail = 'Platform';\nLocale.platform = 'Platform';\nLocale.amountTransfers = function ( transfers ) { if (transfers === 0) { return 'Direct'; } else { return transfers+ ' transfers';} };\nLocale.autocompleteMessages = {\n        noResults: \"No results found.\",\n        results: function( amount ) {\n            return amount + ( amount > 1 ? \" results are \" : \" result is\" ) + \" available, use the up and down arrow keys to navigate them.\";\n        }\n};","$('.nav-search').submit(function(e){\n\te.preventDefault();\n\tconsole.log(this.value);\n});","\n// Planner Widget Javascript\n$('#planner-timepicker').timepicker();\n$('#test-carousel, #next-carousel, #schedules-carousel').carousel({\n\t\tinterval: false\n});\n$('#next-arrivals-agencies').val('');\nvar geolocationBool = false;\nvar lat, lon;\n// var Locale = {};\n// Locale.autocompleteMessages = {\n//         noResults: \"No results found.\",\n//         results: function( amount ) {\n//             return amount + ( amount > 1 ? \" results are \" : \" result is\" ) + \" available, use the up and down arrow keys to navigate them.\";\n//         }\n// };\nvar labelMap = {\n\t'RED': 'label label-danger',\n\t'BLUE': 'label label-primary',\n\t'GOLD': 'label label-warning',\n\t'GREEN': 'label label-success',\n\t'MARTA': 'label label-orange',\n\t'CCT': 'label label-magenta',\n\t'GCT': 'label label-maroon',\n\t'GRTA': 'label label-cyan',\n};\nvar esriUrl = 'https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/';\nfunction getEsriGeometry(option, id){\n\t$.ajax({\n\t\turl: esriUrl + 'find?',\n\t\tdataType: 'jsonp',\n\t\t// delay: 250,\n\t\tdata: {\n\t\t    text: option.text, // search term\n\t\t    magicKey: option.id,\n\t\t    // outFields: 'City,Region',\n\t\t    f: 'pjson',\n\t\t    // distance: 20000,\n\t\t    // searchExtents: -'85.386,34.618,-83.269,32.844',\n\t\t    // location: '-84.383149,33.750855',\n\t\t},\n\t\tsuccess: function(data){\n\t\t\tconsole.log(data);\n\t\t\tvar geom = data.locations[0].feature.geometry;\n\t\t\t$('.planner-form input[name='+id+'Place]').val(geom.y + ',' + geom.x);\n\t\t}\n\t});\n}\nfunction formatRepo (repo) {\n\tif (repo.loading) return repo.text;\n\n\tvar markup = '<div class=\"clearfix\">' +\n\t'<div class=\"col-sm-1\">' +\n\t// '<img src=\"' + repo.owner.avatar_url + '\" style=\"max-width: 100%\" />' +\n\t'</div>' +\n\t'<div clas=\"col-sm-10\">' +\n\t'<div class=\"clearfix\">' +\n\t'<div class=\"col-sm-6\">' + repo.text + '</div>' +\n\t// '<div class=\"col-sm-3\"><i class=\"fa fa-code-fork\"></i> ' + repo.forks_count + '</div>' +\n\t// '<div class=\"col-sm-2\"><i class=\"fa fa-star\"></i> ' + repo.stargazers_count + '</div>' +\n\t'</div>';\n\n\tif (repo.description) {\n\tmarkup += '<div>' + repo.description + '</div>';\n\t}\n\n\tmarkup += '</div></div>';\n\n\treturn markup;\n}\n\nfunction formatRepoSelection (repo) {\n\treturn repo.text;\n}\nvar urlParams;\n$(function(){\n\t// // load stop ids\n\t// var url = 'http://atlanta.onebusaway.org/api/api/where/stop-ids-for-agency/MARTA.json?';\n\t// var params = {};\n\t// // params.query = stopCode;\n\t// params.key = 'TEST';\n\t// url += serialize(params);\n\t// $.ajax({\n\t// \turl: url,\n\t// \tdataType: 'jsonp',\n\t// \tsuccess: function(json){\n\t// \t\tconsole.log(json.data);\n\t// \t\tif (json.data.list.length > 0){\n\t// \t\t\tstopId = json.data.list[0].id;\n\n\t// \t\t}\n\t// \t}\n\t// });\nif (typeof setupAutoComplete === 'function'){\n\tsetupAutoComplete();\n}\n\n\turlParams = jQuery.unparam(window.location.hash);\n\t// console.log(params);{}\n\tif (typeof urlParams.tab !== 'undefined'){\n\t\t$('#' + urlParams.tab + '-link').trigger('click');\n\t\tif (typeof urlParams.stopId !== 'undefined'){\n\t\t\twindow.setTimeout(function(){\n\t\t\t$('#' + urlParams.tab + '-arrivals-btn')\n\t\t\t\t.removeClass('disabled')\n\t\t\t\t.val(urlParams.stopId)\n\t\t\t\t.trigger('click');\n\t\t\t}, 200);\n\t\t\t\n\t\t\t// $(' .stop-code').trigger('click');\n\t\t}\n\t}\n\t$(\".js-data-example-ajax\").change(function(){\n\t\tconsole.log(this.value);\n\t\tconsole.log($(this).select2('data'));\n\t\tvar data = $(this).select2('data') // $(this).select2('data')[0];\n\t\tgetEsriGeometry(data, this.id);\n\t});\n\t$(\".js-data-example-ajax\").select2({\n\t\t// placeholder: \"From\",\n\t\tallowClear: true,\n\t\tajax: {\n\t\t\turl: esriUrl + 'suggest?',\n\t\t\tdataType: 'jsonp',\n\t\t\tdelay: 250,\n\t\t\tdata: function (term, page) {\n\t\t\t\treturn {\n\t\t\t\t\ttext: term, // search term\n\t\t\t\t\t// page: params.page,\n\t\t\t\t\t// outFields: 'City,Region',\n\t\t\t\t\tf: 'json',\n\t\t\t\t\tdistance: 20000,\n\t\t\t\t\tsearchExtents: '-85.386,34.618,-83.269,32.844',\n\t\t\t\t\tlocation: '-84.383149,33.750855',\n\t\t\t\t};\n\t\t\t},\n\t\t\tresults: function (data, page) {\n\t\t\t\tconsole.log(data);\n\t\t\t\t// parse the results into the format expected by Select2.\n\t\t\t\t// since we are using custom formatting functions we do not need to\n\t\t\t\t// alter the remote JSON data\n\t\t\t\tvar res = data.suggestions;\n\t\t\t\tvar array = []\n\t\t\t\t$.each(res, function(i, item){\n\t\t\t\tvar arrItem = {\n\t\t\t\tid: item.magicKey,\n\t\t\t\ttext: item.text\n\t\t\t\t};\n\t\t\t\tarray.push(arrItem);\n\t\t\t\t});\n\t\t\t\treturn {\n\t\t\t\t\tresults: array\n\t\t\t\t};\n\t\t\t},\n\t\t\tcache: true\n\t\t},\n\t\t// escapeMarkup: function (markup) { return markup; }, // let our custom formatter work\n\t\tminimumInputLength: 3,\n\t\ttemplateResult: function (option) {\n\t\t\treturn '<div class=\"clearfix\">' + option.text + '</div>';\n\t\t},\n\t\ttemplateSelection: function (option) {\n\t\t\treturn option.text;\n\t\t}\n\t});\n\tvar routeTypeMap = {\n\t\t'0': 'Tram',\n\t\t'1': 'Subway',\n\t\t'2': 'Rail',\n\t\t'3': 'Bus',\n\t\t'4': 'Ferry',\n\t\t'5': 'Cable',\n\t\t'6': 'Gondola',\n\t\t'7': 'Funicular'\n\t};\n\t// Geolocation\n\tif (\"geolocation\" in navigator) {\n\t\t/* geolocation is available */\n\t\tconsole.log('geolocation');\n\t\tgeolocationBool = true;\n\t\tnavigator.geolocation.getCurrentPosition(function(position) {\n\t\t\tlat = position.coords.latitude;\n\t\t\tlon = position.coords.longitude;\n\t\t\tconsole.log([position.coords.latitude, position.coords.longitude]);\n\t\t});\n\t} else {\n\t\t/* geolocation IS NOT available */\n\t}\n\t// Check if agency data exists\n\tvar url = 'http://atlanta.onebusaway.org/api/api/where/agencies-with-coverage.json?';\n\tvar params = {};\n\t// params.id = agencyId;\n\tparams.key = 'TEST';\n\turl += serialize(params);\n\t$.ajax({\n\t\turl: url,\n\t\tdataType: 'jsonp',\n\t\tsuccess: function(json){\n\t\t\tconsole.log(json.data.list);\n\t\t\tvar agencies = json.data.list;\n\t\t\t$.each(agencies, function(i, agency) {  \n\t\t\t\t$('.arrivals-agencies option[value='+agency.agencyId+']').removeAttr('disabled');\n\t\t\t});\n\t\t}\n\t}); // end ajax\n\n\t// Go back to previous view on planner widget carousels\n\t$('.planner-tab-li').click(function(e){\n\t\tvar widgetClass;\n\t\tif ($(this).hasClass('stop-code')){\n\t\t\twidgetClass = 'stop-code';\n\t\t}\n\t\telse{\n\t\t\twidgetClass = 'next';\n\t\t}\n\t\tif($(this).hasClass('active') && $('#' + widgetClass + '-carousel-inner > .active').index() === 1){\n\t\t\t// console.log('this is active');\n\t\t\t$('#' + widgetClass + '-back-btn').trigger('click');\n\t\t}\n\t});\n\t\n\t// Real-time agency select change\n\t$('input[type=radio][name=agency-arrivals-option], #next-arrivals-agencies').change(function(){\n\t\t$('#next-arrivals-routes').html('<option value=\"\">[Select Route]</option>');\n\t\t$('#next-arrivals-trips')\n\t\t\t.html('<option value=\"\">[Select Direction]</option>')\n\t\t\t.prop('disabled', true);\n\t\t$('#next-arrivals-stops')\n\t\t\t.html('<option value=\"\">[Select Stop]</option>')\n\t\t\t.trigger('change')\n\t\t\t.prop('disabled', true);\n\t\tconsole.log(this.value);\n\t\tif (this.value === 'Nearby'){\n\t\t\t$('#get-location').trigger('click');\n\t\t\treturn true;\n\t\t}\n\t\tvar agencyId = this.value;\n\t\tvar url = 'http://atlanta.onebusaway.org/api/api/where/routes-for-agency/' + agencyId + '.json?';\n\t\tvar params = {};\n\t\t// params.id = agencyId;\n\t\tparams.key = 'TEST';\n\t\turl += serialize(params);\n\t\t$.ajax({\n\t\t\turl: url,\n\t\t\tdataType: 'jsonp',\n\t\t\tsuccess: function(json){\n\t\t\t\tconsole.log(json.data);\n\t\t\t\tvar routeNest = d3.nest()\n\t\t\t\t\t\t.key(function(d) { return d.type; })\n\t\t\t\t\t\t.sortValues(compareRouteNames)\n\t\t\t\t\t\t.map(json.data.list);\n\t\t\t\tconsole.log(routeNest);\n\t\t\t\tvar routes = json.data.list;\n\t\t\t\t$.each(routeNest, function(type, routes) {  \n\t\t\t\t\tvar optgroup = $('<optgroup>');\n\t\t\t\t\toptgroup.attr('label',routeTypeMap[type]);\n\t\t\t\t\t$.each(routes, function(i, route){\n\t\t\t\t\t\tvar option = $(\"<option></option>\");\n\t\t\t\t\t\tvar routeFullText = routeTypeMap[type] === 'Subway' ? route.shortName : route.shortName + ' - ' + route.longName;\n\t\t\t\t\t\tvar routeText = route.longName === '' ? route.shortName : routeFullText;\n\t\t\t\t\t\toption.val(route.id);\n\t\t\t\t\t\toption.text(routeText);\n\t\t\t\t\t\toptgroup.append(option);\n\t\t\t\t\t});\n\t\t\t\t\t$('#next-arrivals-routes').append(optgroup);\n\t\t\t\t});\n\t\t\t\t$('#next-arrivals-routes').prop('disabled', false);\n\t\t\t}\n\t\t}); // end ajax\n\t});\n\t// Use location \n\t$('#get-location').click(function(){\n\t\t$('#next-arrivals-agencies').val('Nearby');\n\t\t$('#next-arrivals-routes').html('<option value=\"\">[Select Route]</option>');\n\t\t$('#next-arrivals-stops')\n\t\t\t.html('<option value=\"\">[Select Stop]</option>')\n\t\t\t.trigger('change')\n\t\t\t.prop('disabled', true);\n\t\t$('#next-arrivals-trips')\n\t\t\t.html('<option value=\"\">[Select Direction]</option>')\n\t\t\t.prop('disabled', true);;\n\t\t$(this).val(moment().unix());\n\t\tif (geolocationBool && typeof lat !== 'undefined'){\n\t\t\tvar url = 'http://atlanta.onebusaway.org/api/api/where/routes-for-location.json?';\n\t\t\tvar params = {};\n\t\t\tparams.lat = lat;\n\t\t\tparams.lon = lon;\n\t\t\tparams.radius = 4000;\n\t\t\tparams.key = 'TEST';\n\t\t\turl += serialize(params);\n\t\t\t$.ajax({\n\t\t\t\turl: url,\n\t\t\t\tdataType: 'jsonp',\n\t\t\t\tsuccess: function(json){\n\t\t\t\t\tconsole.log(json.data);\n\t\t\t\t\tvar routeNest = d3.nest()\n\t\t\t\t\t\t.key(function(d) { return d.agencyId; })\n\t\t\t\t\t\t.map(json.data.list);\n\t\t\t\t\tconsole.log(routeNest);\n\t\t\t\t\tvar agencyCount = 0;\n\t\t\t\t\tvar firstValue;\n\t\t\t\t\t$.each(routeNest, function(agency, routes) {  \n\t\t\t\t\t\tvar optgroup = $('<optgroup>');\n\t\t\t\t\t\toptgroup.attr('label',agency);\n\t\t\t\t\t\t$.each(routes, function(i, route){\n\t\t\t\t\t\t\tvar option = $(\"<option></option>\");\n\t\t\t\t\t\t\tif (agencyCount === 0 || i === 0){\n\t\t\t\t\t\t\t\tfirstValue = route.id;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar routeFullText = routeTypeMap[route.type] === 'Subway' ? route.shortName : route.shortName + ' - ' + route.longName;\n\t\t\t\t\t\t\tvar routeText = route.longName === '' ? route.shortName : routeFullText;\n\t\t\t\t\t\t\toption.val(route.id);\n\t\t\t\t\t\t\toption.text(routeText);\n\t\t\t\t\t\t\toptgroup.append(option);\n\t\t\t\t\t\t});\n\t\t\t\t\t    $('#next-arrivals-routes').append(optgroup);\n\t\t\t\t\t    agencyCount++;\n\t\t\t\t\t});\n\t\t\t\t\t// $('#next-arrivals-routes').val(firstValue);\n\t\t\t\t\t$('#next-arrivals-routes').prop('disabled', false);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\telse{\n\t\t\tconsole.log('no geolocation available');\n\t\t}\n\t});\n\t// Select route change\n\t$('#next-arrivals-routes').change(function(){\n\t\tvar widgetClass;\n\t\tif ($(this).hasClass('nearby')){\n\t\t\twidgetClass = 'nearby';\n\t\t}\n\t\telse{\n\t\t\twidgetClass = 'next';\n\t\t}\n\t\t$('#next-arrivals-stops')\n\t\t\t.html('<option value=\"\">[Select Stop]</option>')\n\t\t\t.trigger('change')\n\t\t\t.prop('disabled', true);\n\t\t$('#next-arrivals-trips').html('<option value=\"\">[Select Direction]</option>');\n\t\tconsole.log(this.value);\n\t\tvar routeId = this.value;\n\t\tvar url = 'http://atlanta.onebusaway.org/api/api/where/stops-for-route/' + routeId + '.json?';\n\t\tvar params = {};\n\t\tparams.key = 'TEST';\n\t\tparams.includePolylines = false;\n\t\turl += serialize(params);\n\t\t$.ajax({\n\t\t\turl: url,\n\t\t\tdataType: 'jsonp',\n\t\t\tsuccess: function(json){\n\t\t\t\tvar closestDistance = 10000000000;\n\t\t\t\tvar closestStop = '';\n\t\t\t\tvar selectedTrip;\n\t\t\t\tvar stopGroups = json.data.entry.stopGroupings[0].stopGroups;\n\t\t\t\tconsole.log(json.data.entry.stopGroupings[0].stopGroups);\n\t\t\t\tconsole.log(json.data);\n\t\t\t\tvar stopMap = d3.nest()\n\t\t\t\t\t.key(function(d) { return d.id; })\n\t\t\t\t\t.map(json.data.references.stops);\n\t\t\t\tvar tripMap = d3.nest()\n\t\t\t\t\t// .key(function(d) { return d.name.name; })\n\t\t\t\t\t// .key(function(d) { return d.tripHeadsign; })\n\t\t\t\t\t.key(function(d) { return d.id; })\n\t\t\t\t\t.map(stopGroups);\n\t\t\t\tconsole.log(stopMap);\n\t\t\t\tconsole.log(tripMap);\n\t\t\t\tconsole.log(routeId);\n\t\t\t\tconsole.log(tripMap[routeId]);\n\t\t\t\tvar headsigns = [];\n\t\t\t\tvar tripCounter = 0;\n\t\t\t\t$.each(stopGroups, function(i, trip){\n\t\t\t\t\t// var tripId = trip.tripId;\n\t\t\t\t\t// console.log(trip.schedule.stopTimes);\n\t\t\t\t\t\n\t\t\t\t\t// if (typeof tripMap[routeId][tripId] !== 'undefined' && tripMap[routeId][tripId][0].routeId === routeId && headsigns.indexOf(tripMap[routeId][tripId][0].tripHeadsign) === -1){\n\t\t\t\t\t\t// var headsign = tripMap[routeId][tripId][0].tripHeadsign;\n\t\t\t\t\t\t// headsigns.push(headsign);\n\t\t\t\t\t\tvar tripLabel = trip.name.name === '' ? trip.id : trimHeadsign(trip.name.name);\n\t\t\t\t\t\tvar tripOption = $(\"<option></option>\");\n\t\t\t\t\t\ttripOption.val(trip.id);\n\t\t\t\t\t\ttripOption.text(tripLabel);\n\t\t\t\t\t\t$('#next-arrivals-trips').append(tripOption);\n\t\t\t\t\t\tvar optgroup = $('<optgroup>');\n\t\t\t\t\t\toptgroup.attr('id', trip.id);\n\t\t\t\t\t\toptgroup.attr('label',tripLabel);\n\t\t\t\t\t\tif (tripCounter === 0){\n\t\t\t\t\t\t\tselectedTrip = trip.id;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\toptgroup.addClass('hidden-optgroup');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t$.each(trip.stopIds, function(j, stopId){\n\t\t\t\t\t\t\tvar stop = stopMap[stopId][0];\n\t\t\t\t\t\t\t// console.log(stop)\n\t\t\t\t\t\t\tvar distance = getDistanceFromLatLonInKm(stop.lat, stop.lon, lat, lon);\n\t\t\t\t\t\t\tif (tripCounter === 0){\n\t\t\t\t\t\t\t\tif (distance < closestDistance){\n\t\t\t\t\t\t\t\t\tclosestDistance = distance;\n\t\t\t\t\t\t\t\t\tclosestStop = stop.id;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar option = $(\"<option></option>\");\n\t\t\t\t\t\t\toption.val(stop.id);\n\t\t\t\t\t\t\toption.attr('distance', distance);\n\t\t\t\t\t\t\tvar stopName = cleanStopName(stop.name);\n\t\t\t\t\t\t\tvar stopDir = stop.direction !== '' ? '(' + stop.direction + ') ' : '';\n\t\t\t\t\t\t\toption.text(stopDir + stopName);\n\t\t\t\t\t\t\toptgroup.append(option);\n\t\t\t\t\t\t\t// $('#' + widgetClass + '-arrivals-stops').append(option);\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\t$('#' + widgetClass + '-arrivals-stops').append(optgroup);\n\t\t\t\t\t\ttripCounter++;\n\t\t\t\t\t// } // end if valid trip for route\n\n\t\t\t\t}); // end each trip\n\t\t\t\tvar $stops = $('#next-arrivals-stops');\n\t\t\t\t$('#next-arrivals-trips').prop('disabled', false);\n\t\t\t\t$('#next-arrivals-trips').val(selectedTrip);\n\t\t\t\t$stops.prop('disabled', false);\n\t\t\t\t$stops.val(closestStop);\n\t\t\t\tif ($stops.val() !== ''){\n\t\t\t\t\t$stops.trigger('change');\n\t\t\t\t}\n\t\t\t\tif ($('#next-arrivals-stops').val() !== ''){\n\t\t\t\t\t$('#next-arrivals-btn').prop('disabled', false);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t$('#next-arrivals-btn').prop('disabled', true);\n\t\t\t\t}\n\t\t\t} // end success\n\t\t}); // end ajax\n\t});\n\t// $('.arrivals-routes').change(function(){\n\t// });\n\tvar previousTrip;\n\t$('#next-arrivals-trips')\n\t\t.on('focus', function () {\n\t\t\t// Store the current value on focus and on change\n\t\t\tpreviousTrip = this.value;\n\t    }).change(function(){\n\t    \tvar closestDistance = 10000000000;\n\t\t\tvar closestStop = '';\n\t\t\tconsole.log(this.value);\n\t\t\t$('#' + previousTrip).addClass('hidden-optgroup');\n\t\t\t$('#' + this.value).removeClass('hidden-optgroup');\n\t\t\t$('#' + this.value + ' > option').each(function(){\n\t\t\t\tvar distance = $(this).attr('distance');\n\t\t\t\tconsole.log(distance);\n\t\t\t\tif (distance < closestDistance){\n\t\t\t\t\tclosestDistance = distance;\n\t\t\t\t\tclosestStop = this.value;\n\t\t\t\t}\n\t\t\t});\n\t\t\tconsole.log(closestStop);\n\t\t\tvar $stops = $('#next-arrivals-stops');\n\t\t\t$stops.val(closestStop);\n\t\t\tif ($stops.val() !== ''){\n\t\t\t\t$stops.trigger('change');\n\t\t\t}\n\t\t});\n\t$('#next-arrivals-stops').change(function(){\n\t\tif (this.value !== ''){\n\t\t\t$('#next-arrivals-btn')\n\t\t\t\t.removeClass('disabled')\n\t\t\t\t.val(this.value);\n\t\t\t$('.get-schedules').removeClass('disabled');\n\t\t}\n\t\telse {\n\t\t\t$('#next-arrivals-btn')\n\t\t\t\t.addClass('disabled')\n\t\t\t\t.val('');\n\t\t\t$('.get-schedules').addClass('disabled');\n\t\t}\n\t});\n\t$('#stop-code').on('keyup', function(e){\n\t\tvar tableId = '#stop-code-arrivals-table';\n\t\tvar table = $(tableId);\n\t\t\n\t\tvar stopCode = $('#stop-code').val() === '' ? '103134' : $('#stop-code').val();\n\t\tif (this.value.length < 6){\n\t\t\tconsole.log(this.value);\n\t\t\t$('#stop-code-error-msg').html('Please enter a valid <strong>six-digit</strong> stop ID.');\n\t\t\t$('#stop-code-arrivals-btn')\n\t\t\t\t.addClass('disabled')\n\t\t\t\t.val('');\n\t\t}\n\t\telse if (this.value.length === 6){\n\t\t\tconsole.log(e);\n\t\t\tconsole.log(this.value);\n\t\t\tvar url = 'http://atlanta.onebusaway.org/api/api/where/stops-for-location.json?';\n\t\t\tvar params = {};\n\t\t\tparams.query = stopCode;\n\t\t\tparams.key = 'TEST';\n\t\t\turl += serialize(params);\n\t\t\t$.ajax({\n\t\t\t\turl: url,\n\t\t\t\tdataType: 'jsonp',\n\t\t\t\tsuccess: function(json){\n\t\t\t\t\tconsole.log(json.data);\n\t\t\t\t\tif (json.data.list.length > 0){\n\t\t\t\t\t\tstopId = json.data.list[0].id;\n\t\t\t\t\t\tstopName = cleanStopName(json.data.list[0].name);\n\t\t\t\t\t\t// $('.get-next-stop-code').removeClass('btn-danger').addClass('btn-primary');\n\t\t\t\t\t\t$('#stop-code-arrivals-btn')\n\t\t\t\t\t\t\t.removeClass('disabled')\n\t\t\t\t\t\t\t.val(stopId);\n\t\t\t\t\t\t$('#stop-code-error-msg').html('Stop: <strong>' + stopName + '</strong>');\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\ttable.hide();\n\t\t\t\t\t\t$('#nearby-arrival-msg').text('No arrivals.');\n\t\t\t\t\t\t$('#nearby-arrival-msg').show();\n\t\t\t\t\t\t$('#stop-code-error-msg').html('Unknown stop ID.');\n\t\t\t\t\t\t$('#stop-code-arrivals-btn')\n\t\t\t\t\t\t\t.addClass('disabled')\n\t\t\t\t\t\t\t.val('');;\n\t\t\t\t\t\t// $('.get-next-stop-code').removeClass('btn-primary').addClass('btn-danger');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} // end if stop code length === 6\n\t\telse {\n\t\t\t$('#stop-code-arrivals-btn')\n\t\t\t\t.addClass('disabled')\n\t\t\t\t.val('');\n\t\t\t$('#stop-code-error-msg').html('Please enter a valid <strong>six-digit</strong> stop ID.');\n\t\t}\n\t});\n\t$('.get-arrivals').click(function(){\n\t\tvar widgetClass, stopId;\n\t\t\n\t\tif ($(this).hasClass('stop-code')){\n\t\t\twidgetClass = 'stop-code';\n\t\t}\n\t\telse{\n\t\t\twidgetClass = 'next';\n\t\t}\n\t\tvar tableId = '#' + widgetClass + '-arrivals-table';\n\t\tvar table = $(tableId);\n\t\tstopId = $('#' + widgetClass + '-arrivals-btn').val();\n\n\t\tconsole.log(stopId);\n\t\tconsole.log(widgetClass);\n\t\tif (stopId !== ''){\n\t\t\t// console.log('stop coding it up');\n\t\t\tvar url = 'http://atlanta.onebusaway.org/api/api/where/arrivals-and-departures-for-stop/' + stopId + '.json?';\n\t\t\tvar params = {};\n\t\t\tparams.key = 'TEST';\n\t\t\tparams.minutesBefore = 1;\n\t\t\turl += serialize(params);\n\t\t\t$.ajax({\n\t\t\t\turl: url,\n\t\t\t\tdataType: 'jsonp',\n\t\t\t\tsuccess: function(json){\n\t\t\t\t\tvar arrivals = json.data.entry.arrivalsAndDepartures;\n\t\t\t\t\tconsole.log(json.data);\n\t\t\t\t\tvar stopMap = d3.nest()\n\t\t\t\t\t\t.key(function(d) { return d.id; })\n\t\t\t\t\t\t.map(json.data.references.stops);\n\n\t\t\t\t\tconsole.log(json.data.entry.arrivalsAndDepartures);\n\t\t\t\t\tif (arrivals.length > 0){\n\t\t\t\t\t\tstopName = stopMap[json.data.entry.stopId][0].name;\n\t\t\t\t\t\t$('#' + widgetClass + '-stop-code').html(cleanStopName('Stop ID: ' + stopId.split('_')[1]));\n\t\t\t\t\t\t$('#' + widgetClass + '-stop-name').html(cleanStopName(stopName));\n\t\t\t\t\t\t$('#' + widgetClass + '-last-updated').html('<a class=\"get-arrivals next btn\"><span class=\"glyphicon glyphicon-refresh\" aria-hidden=\"true\"></span> ' + moment(arrivals[0].lastUpdateTime).format('h:mm a') + '</a>');\n\t\t\t\t\t\t$('#nearby-arrival-msg').hide();\n\t\t\t\t\t\ttable.show();\n\t\t\t\t\t\ttable.empty();\n\n\t\t\t\t\t\t// var header = $('<thead>');\n\t\t\t\t\t\t// header.append('<tr><')\n\t\t\t\t\t\ttable.append('<thead><tr><th>Route</th><th>Minutes</th><th>Direction</th></tr></thead>');\n\t\t\t\t\t\tvar tbody = $('<tbody>');\n\t\t\t\t\t\tvar data = [];\n\t\t\t\t\t\tfor (var i = 0; i < arrivals.length; i++) {\n\t\t\t\t\t\t\t// if (i < 8) {\n\t\t\t\t\t\t\t\tvar predicted = arrivals[i].predictedArrivalTime ? true : false;\n\t\t\t\t\t\t\t\tvar seconds = arrivals[i].predictedArrivalTime || arrivals[i].scheduledArrivalTime;\n\t\t\t\t\t\t\t\tvar diff = seconds - moment().valueOf();\n\t\t\t\t\t\t\t\tvar routeName = arrivals[i].routeShortName;\n\t\t\t\t\t\t\t\t// console.log(diff);\n\t\t\t\t\t\t\t\t// var minutes = String(Math.floor(divisor_for_minutes / 60));\n\t\t\t\t\t\t\t\tvar fromNow = Math.floor(diff/60/1000);//moment(seconds).toNow(true)//.replace('minutes', '').replace('a few seconds', '<strong>NOW</strong>').replace('a minute', '<strong>NOW</strong>');\n\t\t\t\t\t\t\t\tvar fromNowText = fromNow <= 1 ? '<strong>NOW</strong>' : fromNow;\n\t\t\t\t\t\t\t\tvar headsign = trimHeadsign(arrivals[i].tripHeadsign);\n\t\t\t\t\t\t\t\tvar patt = new RegExp(\"Airport\");\n\t\t\t\t\t\t\t\tif (patt.test(headsign)){\n\t\t\t\t\t\t\t\t\theadsign += ' <i class=\"fa fa-plane\"></i>';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// data.push([\n\t\t\t\t\t\t\t\t// \tarrivals[i].routeShortName, \n\t\t\t\t\t\t\t\t// \tfromNow, \n\t\t\t\t\t\t\t\t// \theadsign, \n\t\t\t\t\t\t\t\t// \t+seconds\n\t\t\t\t\t\t\t\t// ]);\n\t\t\t\t\t\t\t\tvar row = $('<tr class=\"info\">');\n\t\t\t\t\t\t\t\tif (predicted){\n\t\t\t\t\t\t\t\t\tfromNowText += ' <i style=\"font-size:0.7em;\" alt=\"Predicted arrival time\" title=\"Predicted arrival time\" class=\"fa fa-bolt\"></i>';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trow.append('<td><span class=\"'+labelMap[routeName]+'\">' + routeName + '</span></td>');\n\t\t\t\t\t\t\t\trow.append('<td data-order=\"'+fromNow+'\">' + fromNowText + '</td>');\n\t\t\t\t\t\t\t\trow.append('<td>' + headsign + '</td>');\n\t\t\t\t\t\t\t\ttbody.append(row);\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttable.append(tbody);\n\t\t\t\t\t\tconsole.log(data);\n\t\t\t\t\t\tif ( $.fn.dataTable.isDataTable(tableId) ) {\n\t\t\t\t\t\t\tarrivalsDatatable = table.DataTable();\n\t\t\t\t\t\t\t// arrivalsDatatable.clear();\n\t\t\t\t\t\t\t// arrivalsDatatable.rows.add(data);\n\t\t\t\t\t\t\t// arrivalsDatatable.draw();\n\t\t\t\t\t\t\tarrivalsDatatable.destroy();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// else {\n\t\t\t\t\t\t\tarrivalsDatatable = table.DataTable( {\n\t\t\t\t\t\t\t\t\"order\": [[ 1, \"asc\" ]],\n\t\t\t\t\t\t\t\t// \"columns\": [\n\t\t\t\t\t\t\t\t// \t{\"title\": \"Route\"},\n\t\t\t\t\t\t\t\t// \t{\"title\": \"Minutes\"},\n\t\t\t\t\t\t\t\t// \t{\"title\": \"Direction\"},\n\t\t\t\t\t\t\t\t// \t{\"title\": \"diff\", \"type\": \"num\"}\n\t\t\t\t\t\t\t\t// ],\n\t\t\t\t\t\t\t\t// \"columnDefs\": [\n\t\t\t\t\t\t\t\t// \t// \"targets\": [ 2 ],\n\t\t\t\t\t\t\t\t// \t// \"visible\": false\n\t\t\t\t\t\t\t\t// \t// { \"type\": \"num\", \"targets\": 0 }\n\t\t\t\t\t\t\t\t// \t{ \"visible\": false, \"targets\": 3 },\n\t\t\t\t\t\t\t\t// \t// { \"orderData\": 1,    \"targets\": 3 },\n\t\t\t\t\t\t\t\t// ],\n\t\t\t\t\t\t\t\t// \"data\": data,\n\t\t\t\t\t\t\t\t\"paging\": false,\n\t\t\t\t\t\t\t\t// \"pageLength\": 6,\n\t\t\t\t\t\t\t\t// \"ordering\": false,\n\t\t\t\t\t\t\t\t\"info\": false,\n\t\t\t\t\t\t\t\t\"bFilter\": false\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t// }\n\t\t\t\t\t} // end if there are arrivals in the list\n\t\t\t\t\telse{\n\t\t\t\t\t\ttable.hide();\n\t\t\t\t\t\t$('#' + widgetClass + '-stop-name').html('');\n\t\t\t\t\t\t$('#' + widgetClass + '-last-updated').html('');\n\t\t\t\t\t\t$('#' + widgetClass + '-arrival-msg').text('No arrivals in the next 30 minutes.');\n\t\t\t\t\t\t$('#' + widgetClass + '-arrival-msg').show();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\t$(\"#planner-go-btn\").click(function(){\n\t\tvar params = {};\n\t\tvar plannerChoice = $('.planner-choice-btn').val();\n\t\tvar origin = $('#planner-options-from-latlng').val();\n\t\tvar destination = $('#planner-options-dest-latlng').val();\n\t\tvar time = $('#planner-timepicker').val();\n\t\tconsole.log(origin);\n\t\tif (plannerChoice === 'Google Transit'){\n\t\t\tparams.saddr = origin;\n\t\t    params.daddr = destination;\n\t\t    params.dirflg = 'r';\n\t\t\tvar googUrl = 'http://maps.google.com/?';\n\t\t\twindow.location.href = googUrl + serialize(params);\n\t\t}\n\t\telse{\n\t\t\tparams.fromPlace = origin;\n\t\t    params.toPlace = destination;\n\t\t    params.arriveBy = $(\".planner-time-btn:first-child\").val() === 'Arrive by' ? true : false;\n\t\t    params.date = moment().format('YYYY-MM-DD');\n\t\t    params.time = moment().valueOf();\n\t\t    params.fromName = $('#planner-options-from').val() // $('#from').select2('data')[0].text;\n\t\t\t// params.toPlace = $('#planner-options-dest-latlng').val();\n\t\t\tparams.toName = $('#planner-options-dest').val() // $('#to').select2('data')[0].text;\n\t\t\tparams.mode = 'TRANSIT,WALK'; // $('input[name=mode-select]:checked').val()\n\t\t\tvar atltransitUrl = 'plan#';\n\t\t\t// console.log(atltransitUrl + serialize(params));\n\t\t\twindow.location.href = atltransitUrl + serialize(params);\n\t\t}\n\t\t// window.location.href='{{ site.baseurl }}/plan' + params;\n\t});\n    $(\".planner-time-menu li a\").click(function(){\n\n      $(\".planner-time-btn:first-child\").html('<i class=\"fa fa-clock-o\"></i> ' + $(this).text());\n      $(\".planner-time-btn:first-child\").val($(this).text());\n      var val = $(\".planner-time-btn:first-child\").val();\n      if (val === 'Depart at' || val === 'Arrive by'){\n      \t$('#planner-time-input').show();\n      }\n      else{\n      \t$('#planner-time-input').hide();\n      }\n   });\n\n   $(\".planner-choice-menu li a\").click(function(){\n      $(\".planner-choice-btn:first-child\").html($(this).text());\n      $(\".planner-choice-btn:first-child\").val($(this).text());\n   });\n //   $('.box').click(function() {\n\n\t//     $(this).animate({\n\t//         left: '-50%'\n\t//     }, 500, function() {\n\t//         $(this).css('left', '150%');\n\t//         $(this).appendTo('#box-container');\n\t//     });\n\n\t//     $(this).next().animate({\n\t//         left: '50%'\n\t//     }, 500);\n\t// });\n\t$('#trig').on('click', function () {\n\t    $('#col1').toggleClass('col-md-12 col-md-3');\n\t    $('#col2').toggleClass('col-md-0 col-md-9');\n\t});\n});","var routeTypeMap = {\n\t\t'0': 'Tram',\n\t\t'1': 'Subway',\n\t\t'2': 'Rail',\n\t\t'3': 'Bus',\n\t\t'4': 'Ferry',\n\t\t'5': 'Cable',\n\t\t'6': 'Gondola',\n\t\t'7': 'Funicular'\n\t};\nvar currentTime = moment();\nsetupDatetime();\n\n// Schedules agency select change\n\t$('input[type=radio][name=agency-arrivals-option], #schedules-agencies').change(function(){\n\t\t$('#schedules-routes').html('<option value=\"\">[Select Route]</option>');\n\t\t$('#schedules-trips')\n\t\t\t.html('<option value=\"\">[Select Direction]</option>')\n\t\t\t.prop('disabled', true);\n\t\t$('#schedules-stops')\n\t\t\t.html('<option value=\"\">[Select Stop]</option>')\n\t\t\t.trigger('change')\n\t\t\t.prop('disabled', true);\n\t\tconsole.log(this.value);\n\t\tif (this.value === 'Nearby'){\n\t\t\t$('#get-location').trigger('click');\n\t\t\treturn true;\n\t\t}\n\t\tvar agencyId = this.value;\n\t\tvar url = 'http://atlanta.onebusaway.org/api/api/where/routes-for-agency/' + agencyId + '.json?';\n\t\tvar params = {};\n\t\t// params.id = agencyId;\n\t\tparams.key = 'TEST';\n\t\turl += serialize(params);\n\t\t$.ajax({\n\t\t\turl: url,\n\t\t\tdataType: 'jsonp',\n\t\t\tsuccess: function(json){\n\t\t\t\tconsole.log(json.data);\n\t\t\t\tvar routeNest = d3.nest()\n\t\t\t\t\t\t.key(function(d) { return d.type; })\n\t\t\t\t\t\t.sortValues(compareRouteNames)\n\t\t\t\t\t\t.map(json.data.list);\n\t\t\t\tconsole.log(routeNest);\n\t\t\t\tvar routes = json.data.list;\n\t\t\t\t$.each(routeNest, function(type, routes) {  \n\t\t\t\t\tvar optgroup = $('<optgroup>');\n\t\t\t\t\toptgroup.attr('label',routeTypeMap[type]);\n\t\t\t\t\t$.each(routes, function(i, route){\n\t\t\t\t\t\tvar option = $(\"<option></option>\");\n\t\t\t\t\t\tvar routeFullText = routeTypeMap[type] === 'Subway' ? route.shortName : route.shortName + ' - ' + route.longName;\n\t\t\t\t\t\tvar routeText = route.longName === '' ? route.shortName : routeFullText;\n\t\t\t\t\t\toption.val(route.id);\n\t\t\t\t\t\toption.text(routeText);\n\t\t\t\t\t\toptgroup.append(option);\n\t\t\t\t\t});\n\t\t\t\t\t$('#schedules-routes').append(optgroup);\n\t\t\t\t});\n\t\t\t\t$('#schedules-routes').prop('disabled', false);\n\t\t\t}\n\t\t}); // end ajax\n\t});\n\t// Use location \n\t$('#get-location').click(function(){\n\t\t$('#schedules-agencies').val('Nearby');\n\t\t$('#schedules-routes').html('<option value=\"\">[Select Route]</option>');\n\t\t$('#schedules-stops')\n\t\t\t.html('<option value=\"\">[Select Stop]</option>')\n\t\t\t.trigger('change')\n\t\t\t.prop('disabled', true);\n\t\t$('#schedules-trips')\n\t\t\t.html('<option value=\"\">[Select Direction]</option>')\n\t\t\t.prop('disabled', true);;\n\t\t$(this).val(moment().unix());\n\t\tif (geolocationBool && typeof lat !== 'undefined'){\n\t\t\tvar url = 'http://atlanta.onebusaway.org/api/api/where/routes-for-location.json?';\n\t\t\tvar params = {};\n\t\t\tparams.lat = lat;\n\t\t\tparams.lon = lon;\n\t\t\tparams.radius = 4000;\n\t\t\tparams.key = 'TEST';\n\t\t\turl += serialize(params);\n\t\t\t$.ajax({\n\t\t\t\turl: url,\n\t\t\t\tdataType: 'jsonp',\n\t\t\t\tsuccess: function(json){\n\t\t\t\t\tconsole.log(json.data);\n\t\t\t\t\tvar routeNest = d3.nest()\n\t\t\t\t\t\t.key(function(d) { return d.agencyId; })\n\t\t\t\t\t\t.map(json.data.list);\n\t\t\t\t\tconsole.log(routeNest);\n\t\t\t\t\tvar agencyCount = 0;\n\t\t\t\t\tvar firstValue;\n\t\t\t\t\t$.each(routeNest, function(agency, routes) {  \n\t\t\t\t\t\tvar optgroup = $('<optgroup>');\n\t\t\t\t\t\toptgroup.attr('label',agency);\n\t\t\t\t\t\t$.each(routes, function(i, route){\n\t\t\t\t\t\t\tvar option = $(\"<option></option>\");\n\t\t\t\t\t\t\tif (agencyCount === 0 || i === 0){\n\t\t\t\t\t\t\t\tfirstValue = route.id;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar routeFullText = routeTypeMap[route.type] === 'Subway' ? route.shortName : route.shortName + ' - ' + route.longName;\n\t\t\t\t\t\t\tvar routeText = route.longName === '' ? route.shortName : routeFullText;\n\t\t\t\t\t\t\toption.val(route.id);\n\t\t\t\t\t\t\toption.text(routeText);\n\t\t\t\t\t\t\toptgroup.append(option);\n\t\t\t\t\t\t});\n\t\t\t\t\t    $('#schedules-routes').append(optgroup);\n\t\t\t\t\t    agencyCount++;\n\t\t\t\t\t});\n\t\t\t\t\t// $('#schedules-routes').val(firstValue);\n\t\t\t\t\t$('#schedules-routes').prop('disabled', false);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\telse{\n\t\t\tconsole.log('no geolocation available');\n\t\t}\n\t});\n\t// Select route change\n\t$('#schedules-routes').change(function(){\n\t\tvar widgetClass;\n\t\tif ($(this).hasClass('nearby')){\n\t\t\twidgetClass = 'nearby';\n\t\t}\n\t\telse{\n\t\t\twidgetClass = 'next';\n\t\t}\n\t\twidgetClass = 'schedules';\n\t\t$('#schedules-stops')\n\t\t\t.html('<option value=\"\">[Select Stop]</option>')\n\t\t\t.trigger('change')\n\t\t\t.prop('disabled', true);\n\t\t$('#schedules-trips').html('<option value=\"\">[Select Direction]</option>');\n\t\tconsole.log(this.value);\n\t\tvar routeId = this.value;\n\t\tvar url = 'http://atlanta.onebusaway.org/api/api/where/stops-for-route/' + routeId + '.json?';\n\t\tvar params = {};\n\t\tparams.key = 'TEST';\n\t\tparams.includePolylines = false;\n\t\turl += serialize(params);\n\t\t$.ajax({\n\t\t\turl: url,\n\t\t\tdataType: 'jsonp',\n\t\t\tsuccess: function(json){\n\t\t\t\tvar closestDistance = 10000000000;\n\t\t\t\tvar closestStop = '';\n\t\t\t\tvar selectedTrip;\n\t\t\t\tvar stopGroups = json.data.entry.stopGroupings[0].stopGroups;\n\t\t\t\tconsole.log(json.data.entry.stopGroupings[0].stopGroups);\n\t\t\t\tconsole.log(json.data);\n\t\t\t\tvar stopMap = d3.nest()\n\t\t\t\t\t.key(function(d) { return d.id; })\n\t\t\t\t\t.map(json.data.references.stops);\n\t\t\t\tvar tripMap = d3.nest()\n\t\t\t\t\t// .key(function(d) { return d.name.name; })\n\t\t\t\t\t// .key(function(d) { return d.tripHeadsign; })\n\t\t\t\t\t.key(function(d) { return d.id; })\n\t\t\t\t\t.map(stopGroups);\n\t\t\t\tconsole.log(stopMap);\n\t\t\t\tconsole.log(tripMap);\n\t\t\t\tconsole.log(routeId);\n\t\t\t\tconsole.log(tripMap[routeId]);\n\t\t\t\tvar headsigns = [];\n\t\t\t\tvar tripCounter = 0;\n\t\t\t\t$.each(stopGroups, function(i, trip){\n\t\t\t\t\t// var tripId = trip.tripId;\n\t\t\t\t\t// console.log(trip);\n\t\t\t\t\t\n\t\t\t\t\t// if (typeof tripMap[routeId][tripId] !== 'undefined' && tripMap[routeId][tripId][0].routeId === routeId && headsigns.indexOf(tripMap[routeId][tripId][0].tripHeadsign) === -1){\n\t\t\t\t\t\t// var headsign = tripMap[routeId][tripId][0].tripHeadsign;\n\t\t\t\t\t\t// headsigns.push(headsign);\n\t\t\t\t\t\tvar tripLabel = trip.name.name === '' ? trip.id : trimHeadsign(trip.name.name);\n\t\t\t\t\t\tvar tripOption = $(\"<option></option>\");\n\t\t\t\t\t\ttripOption.val(trip.id);\n\t\t\t\t\t\ttripOption.text(tripLabel);\n\t\t\t\t\t\t$('#schedules-trips').append(tripOption);\n\t\t\t\t\t\tvar optgroup = $('<optgroup>');\n\t\t\t\t\t\toptgroup.attr('id', trip.id);\n\t\t\t\t\t\toptgroup.attr('label',tripLabel);\n\t\t\t\t\t\tif (tripCounter === 0){\n\t\t\t\t\t\t\tselectedTrip = trip.id;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\toptgroup.addClass('hidden-optgroup');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t$.each(trip.stopIds, function(j, stopId){\n\t\t\t\t\t\t\tvar stop = stopMap[stopId][0];\n\t\t\t\t\t\t\tconsole.log(stop)\n\t\t\t\t\t\t\tvar distance = getDistanceFromLatLonInKm(stop.lat, stop.lon, lat, lon);\n\t\t\t\t\t\t\tif (tripCounter === 0){\n\t\t\t\t\t\t\t\tif (distance < closestDistance){\n\t\t\t\t\t\t\t\t\tclosestDistance = distance;\n\t\t\t\t\t\t\t\t\tclosestStop = stop.id;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar option = $(\"<option></option>\");\n\t\t\t\t\t\t\toption.val(stop.id);\n\t\t\t\t\t\t\toption.attr('distance', distance);\n\t\t\t\t\t\t\tvar stopName = cleanStopName(stop.name);\n\t\t\t\t\t\t\tvar stopDir = stop.direction !== '' ? '(' + stop.direction + ') ' : '';\n\t\t\t\t\t\t\toption.text(stopDir + stopName);\n\t\t\t\t\t\t\toptgroup.append(option);\n\t\t\t\t\t\t\t// $('#' + widgetClass + '-arrivals-stops').append(option);\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\t$('#schedules-stops').append(optgroup);\n\t\t\t\t\t\ttripCounter++;\n\t\t\t\t\t// } // end if valid trip for route\n\n\t\t\t\t}); // end each trip\n\t\t\t\tvar $stops = $('#schedules-stops');\n\t\t\t\t$('#schedules-trips').prop('disabled', false);\n\t\t\t\t$('#schedules-trips').val(selectedTrip);\n\t\t\t\t$stops.prop('disabled', false);\n\t\t\t\t$stops.val(closestStop);\n\t\t\t\tif ($stops.val() !== ''){\n\t\t\t\t\t$stops.trigger('change');\n\t\t\t\t}\n\t\t\t\tif ($('#schedules-stops').val() !== ''){\n\t\t\t\t\t$('#schedules-btn').prop('disabled', false);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t$('#schedules-btn').prop('disabled', true);\n\t\t\t\t}\n\t\t\t} // end success\n\t\t}); // end ajax\n\t});\n\tvar previousTrip;\n\t$('#schedules-trips')\n\t\t.on('focus', function () {\n\t\t\t// Store the current value on focus and on change\n\t\t\tpreviousTrip = this.value;\n\t    }).change(function(){\n\t    \tvar closestDistance = 10000000000;\n\t\t\tvar closestStop = '';\n\t\t\tconsole.log(this.value);\n\t\t\t$('#' + previousTrip).addClass('hidden-optgroup');\n\t\t\t$('#' + this.value).removeClass('hidden-optgroup');\n\t\t\t$('#' + this.value + ' > option').each(function(){\n\t\t\t\tvar distance = $(this).attr('distance');\n\t\t\t\tconsole.log(distance);\n\t\t\t\tif (distance < closestDistance){\n\t\t\t\t\tclosestDistance = distance;\n\t\t\t\t\tclosestStop = this.value;\n\t\t\t\t}\n\t\t\t});\n\t\t\tconsole.log(closestStop);\n\t\t\tvar $stops = $('#schedules-stops');\n\t\t\t$stops.val(closestStop);\n\t\t\tif ($stops.val() !== ''){\n\t\t\t\t$stops.trigger('change');\n\t\t\t}\n\t\t});\n\t$('#schedules-stops').change(function(){\n\t\tif (this.value !== ''){\n\t\t\t$('#schedules-btn')\n\t\t\t\t.removeClass('disabled')\n\t\t\t\t.val(this.value);\n\t\t\t$('.get-realtime').removeClass('disabled');\n\t\t}\n\t\telse {\n\t\t\t$('#schedules-btn')\n\t\t\t\t.addClass('disabled')\n\t\t\t\t.val('');\n\t\t\t$('.get-realtime').addClass('disabled');\n\t\t}\n\t});\n\t$('.get-schedules').click(function(){\n\t\tvar widgetClass, stopId;\n\t\t\n\t\tif ($(this).hasClass('stop-code')){\n\t\t\twidgetClass = 'stop-code';\n\t\t}\n\t\telse{\n\t\t\twidgetClass = 'next';\n\t\t}\n\t\twidgetClass = 'schedules';\n\t\tstopId = $('#' + widgetClass + '-btn').val();\n\t\tvar routeId = $('#' + widgetClass + '-routes').val();\n\t\tconsole.log(stopId);\n\t\tconsole.log(routeId);\n\t\tconsole.log(widgetClass);\n\t\tif (stopId !== ''){\n\t\t\t// console.log('stop coding it up');\n\t\t\tvar url = 'http://atlanta.onebusaway.org/api/api/where/schedule-for-stop/' + stopId + '.json?';\n\t\t\tvar params = {};\n\t\t\tparams.key = 'TEST';\n\t\t\tparams.minutesBefore = 1;\n\t\t\turl += serialize(params);\n\t\t\t$.ajax({\n\t\t\t\turl: url,\n\t\t\t\tdataType: 'jsonp',\n\t\t\t\tsuccess: function(json){\n\t\t\t\t\tvar routes = json.data.entry.stopRouteSchedules;\n\t\t\t\t\tconsole.log(json.data);\n\t\t\t\t\tvar stopMap = d3.nest()\n\t\t\t\t\t\t.key(function(d) { return d.id; })\n\t\t\t\t\t\t.map(json.data.references.stops);\n\t\t\t\t\tvar routeMap = d3.nest()\n\t\t\t\t\t\t.key(function(d) { return d.id; })\n\t\t\t\t\t\t.map(json.data.references.routes);\n\t\t\t\t\tconsole.log(routeMap);\n\t\t\t\t\tconsole.log(json.data.entry.stopRouteSchedules);\n\t\t\t\t\tif (routes.length > 0){\n\t\t\t\t\t\tstopName = stopMap[json.data.entry.stopId][0].name;\n\t\t\t\t\t\t$('#' + widgetClass + '-stop-code').html(cleanStopName('Stop ID: ' + stopId.split('_')[1]));\n\t\t\t\t\t\t$('#' + widgetClass + '-stop-name').html(cleanStopName(stopName));\n\t\t\t\t\t\t// $('#' + widgetClass + '-last-updated').html('<a class=\"get-arrivals next btn\"><span class=\"glyphicon glyphicon-refresh\" aria-hidden=\"true\"></span> ' + moment(arrivals[0].lastUpdateTime).format('h:mm a') + '</a>');\n\t\t\t\t\t\t$('#nearby-arrival-msg').hide();\n\t\t\t\t\t\tvar data = [];\n\t\t\t\t\t\tvar schedulesDiv = $('.schedules-tables');\n\t\t\t\t\t\tfor (var i = 0; i < routes.length; i++) {\n\t\t\t\t\t\t\tconsole.log(routes[i]);\n\t\t\t\t\t\t\tvar routeName = routeMap[routes[i].routeId][0].shortName;\n\t\t\t\t\t\t\tvar directions = routes[i].stopRouteDirectionSchedules;\n\t\t\t\t\t\t\tfor (var j = 0; j < directions.length; j++) {\n\t\t\t\t\t\t\t\t// var tableId = '#' + widgetClass + '-table';\n\t\t\t\t\t\t\t\tvar table = $('<table class=\"table table-hover\" id=\"schedule-'+routeId+j+'\"></table>');\n\t\t\t\t\t\t\t\ttable.show();\n\t\t\t\t\t\t\t\ttable.empty();\n\n\t\t\t\t\t\t\t\ttable.append('<thead><tr><th class=\"text-right\">Hour</th><th>Minute</th></tr></thead>');\n\t\t\t\t\t\t\t\tvar tbody = $('<tbody>');\n\t\t\t\t\t\t\t\tvar headsign = trimHeadsign(directions[j].tripHeadsign);\n\t\t\t\t\t\t\t\tif (directions[j].scheduleFrequencies.length > 0){\n\t\t\t\t\t\t\t\t\tconsole.log('freq based');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\tconsole.log('sched based');\n\t\t\t\t\t\t\t\t\tconsole.log(directions[j].scheduleStopTimes);\n\t\t\t\t\t\t\t\t\tvar stopTimes = directions[j].scheduleStopTimes;\n\t\t\t\t\t\t\t\t\tvar firstTime = moment(stopTimes[0].arrivalTime);\n\t\t\t\t\t\t\t\t\tvar currentHour = 0;\n\t\t\t\t\t\t\t\t\tvar row;\n\t\t\t\t\t\t\t\t\tvar minuteCell;\n\t\t\t\t\t\t\t\t\tfor (var k = 0; k < stopTimes.length; k++) {\n\t\t\t\t\t\t\t\t\t\tvar seconds = stopTimes[k].arrivalTime;\n\t\t\t\t\t\t\t\t\t\tconsole.log(seconds);\n\t\t\t\t\t\t\t\t\t\tvar arrivalTime = moment(seconds);\n\t\t\t\t\t\t\t\t\t\tvar nextArrivalTime;\n\t\t\t\t\t\t\t\t\t\tif (k !== stopTimes.length - 1){\n\t\t\t\t\t\t\t\t\t\t\tnextArrivalTime = moment(stopTimes[k + 1].arrivalTime);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tconsole.log(arrivalTime.format('h:mm a'));\n\t\t\t\t\t\t\t\t\t\tif (arrivalTime.hour() !== currentHour){\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(arrivalTime.hour())\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(currentHour)\n\t\t\t\t\t\t\t\t\t\t\t// if (arrivalTime.hour() > firstTime.hour()){\n\t\t\t\t\t\t\t\t\t\t\t// \ttbody.append($('.' +i+j+arrivalTime.hour()));\n\t\t\t\t\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t\t\t\t\trow = $('<tr id=\"'+i+j+arrivalTime.hour()+'\">');\n\t\t\t\t\t\t\t\t\t\t\trow.append('<td class=\"text-right\"><strong>' + arrivalTime.hour() + ':</strong></td>');\n\t\t\t\t\t\t\t\t\t\t\tminuteCell = $('<td class=\"text-left\">' + arrivalTime.minutes() + '</td>');\n\t\t\t\t\t\t\t\t\t\t\trow.append();\n\t\t\t\t\t\t\t\t\t\t\tcurrentHour = arrivalTime.hour();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\t\tminuteCell.append(' ' + arrivalTime.minutes());\n\t\t\t\t\t\t\t\t\t\t\tconsole.log($('.'+i+j+'-hour-'+arrivalTime.hour()).html());\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (nextArrivalTime.hour() !== arrivalTime.hour()){\n\t\t\t\t\t\t\t\t\t\t\trow.append(minuteCell);\n\t\t\t\t\t\t\t\t\t\t\ttbody.append(row);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (k == stopTimes.length - 1){\n\t\t\t\t\t\t\t\t\t\t\tconsole.log('done')\n\t\t\t\t\t\t\t\t\t\t\ttable.append(tbody);\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(table)\n\t\t\t\t\t\t\t\t\t\t\tschedulesDiv\n\t\t\t\t\t\t\t\t\t\t\t\t.append('<h4>'+ routeName + ' - ' + headsign +'</h4')\n\t\t\t\t\t\t\t\t\t\t\t\t.append(table);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// var predicted = routes[i].predictedArrivalTime ? true : false;\n\t\t\t\t\t\t\t// var seconds = routes[i].predictedArrivalTime || routes[i].scheduledArrivalTime;\n\t\t\t\t\t\t\t// var diff = seconds - moment().valueOf();\n\t\t\t\t\t\t\t// var routeName = routes[i].routeShortName;\n\t\t\t\t\t\t\t// var fromNow = Math.floor(diff/60/1000);//moment(seconds).toNow(true)//.replace('minutes', '').replace('a few seconds', '<strong>NOW</strong>').replace('a minute', '<strong>NOW</strong>');\n\t\t\t\t\t\t\t// var fromNowText = fromNow <= 1 ? '<strong>NOW</strong>' : fromNow;\n\t\t\t\t\t\t\t// var headsign = trimHeadsign(routes[i].tripHeadsign);\n\t\t\t\t\t\t\t// var patt = new RegExp(\"Airport\");\n\t\t\t\t\t\t\t// if (patt.test(headsign)){\n\t\t\t\t\t\t\t// \theadsign += ' <i class=\"fa fa-plane\"></i>';\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t// var row = $('<tr class=\"info\">');\n\t\t\t\t\t\t\t// if (predicted){\n\t\t\t\t\t\t\t// \tfromNowText += ' <i style=\"font-size:0.7em;\" alt=\"Predicted arrival time\" title=\"Predicted arrival time\" class=\"fa fa-bolt\"></i>';\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t// row.append('<td><span class=\"'+labelMap[routeName]+'\">' + routeName + '</span></td>');\n\t\t\t\t\t\t\t// row.append('<td data-order=\"'+fromNow+'\">' + fromNowText + '</td>');\n\t\t\t\t\t\t\t// row.append('<td>' + headsign + '</td>');\n\t\t\t\t\t\t\t// tbody.append(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tconsole.log(data);\n\t\t\t\t\t\t// if ( $.fn.dataTable.isDataTable(tableId) ) {\n\t\t\t\t\t\t// \tarrivalsDatatable = table.DataTable();\n\t\t\t\t\t\t// \t// arrivalsDatatable.clear();\n\t\t\t\t\t\t// \t// arrivalsDatatable.rows.add(data);\n\t\t\t\t\t\t// \t// arrivalsDatatable.draw();\n\t\t\t\t\t\t// \tarrivalsDatatable.destroy();\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// else {\n\t\t\t\t\t\t\t// arrivalsDatatable = table.DataTable( {\n\t\t\t\t\t\t\t// \t\"order\": [[ 1, \"asc\" ]],\n\t\t\t\t\t\t\t// \t// \"columns\": [\n\t\t\t\t\t\t\t// \t// \t{\"title\": \"Route\"},\n\t\t\t\t\t\t\t// \t// \t{\"title\": \"Minutes\"},\n\t\t\t\t\t\t\t// \t// \t{\"title\": \"Direction\"},\n\t\t\t\t\t\t\t// \t// \t{\"title\": \"diff\", \"type\": \"num\"}\n\t\t\t\t\t\t\t// \t// ],\n\t\t\t\t\t\t\t// \t// \"columnDefs\": [\n\t\t\t\t\t\t\t// \t// \t// \"targets\": [ 2 ],\n\t\t\t\t\t\t\t// \t// \t// \"visible\": false\n\t\t\t\t\t\t\t// \t// \t// { \"type\": \"num\", \"targets\": 0 }\n\t\t\t\t\t\t\t// \t// \t{ \"visible\": false, \"targets\": 3 },\n\t\t\t\t\t\t\t// \t// \t// { \"orderData\": 1,    \"targets\": 3 },\n\t\t\t\t\t\t\t// \t// ],\n\t\t\t\t\t\t\t// \t// \"data\": data,\n\t\t\t\t\t\t\t// \t\"paging\": false,\n\t\t\t\t\t\t\t// \t// \"pageLength\": 6,\n\t\t\t\t\t\t\t// \t// \"ordering\": false,\n\t\t\t\t\t\t\t// \t\"info\": false,\n\t\t\t\t\t\t\t// \t\"bFilter\": false\n\t\t\t\t\t\t\t// });\n\t\t\t\t\t\t// }\n\t\t\t\t\t} // end if there are arrivals in the list\n\t\t\t\t\t// else{\n\t\t\t\t\t// \ttable.hide();\n\t\t\t\t\t// \t$('#' + widgetClass + '-stop-name').html('');\n\t\t\t\t\t// \t$('#' + widgetClass + '-last-updated').html('');\n\t\t\t\t\t// \t$('#' + widgetClass + '-arrival-msg').text('No arrivals in the next 30 minutes.');\n\t\t\t\t\t// \t$('#' + widgetClass + '-arrival-msg').show();\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});","function compareRouteNames(a,b){ return a.shortName - b.shortName; }\nfunction findBootstrapEnvironment() {\n    var envs = ['xs', 'sm', 'md', 'lg'];\n\n    $el = $('<div>');\n    $el.appendTo($('body'));\n\n    for (var i = envs.length - 1; i >= 0; i--) {\n        var env = envs[i];\n\n        $el.addClass('hidden-'+env);\n        if ($el.is(':hidden')) {\n            $el.remove();\n            return env;\n        }\n    }\n}\nfunction setupDatetime(){\n    // if(Modernizr.inputtypes.time){\n        $('#planner-options-timeformat').hide();\n        $('#planner-options-timeformat').attr('aria-hidden',true);\n    // }\n    setTime(currentTime);\n    function pad(n) { return n < 10 ? '0' + n : n }\n    var date = currentTime.year() + '-' + pad(currentTime.month() + 1) + '-' + pad(currentTime.date());\n    setDate(date);\n    if (typeof $().datepicker === 'function'){\n      $(\"#planner-options-date\").datepicker( {\n         dateFormat: Locale.dateFormat,\n         dayNames: Locale.days,\n         dayNamesMin : Locale.daysMin,\n         monthNames: Locale.months,\n         defaultDate: 0,\n         hideIfNoPrevNext: true,\n         minDate: whitelabel_minDate,\n         maxDate: whitelabel_maxDate\n      });\n    }\n    else{\n      console.log('error no datetimepicker');\n    }\n    /* Read aloud the selected dates */\n    $(document).on(\"mouseenter\", \".ui-state-default\", function() {\n        var text = $(this).text()+\" \"+$(\".ui-datepicker-month\",$(this).parents()).text()+\" \"+$(\".ui-datepicker-year\",$(this).parents()).text();\n        $(\"#planner-options-date-messages\").text(text);\n    });\n\n    // if(Modernizr.inputtypes.date){\n        $('#planner-options-dateformat').hide();\n        $('#planner-options-dateformat').attr('aria-hidden',true);\n    // }\n};\nfunction setDate(iso8601){\n  parts = iso8601.split('-');\n  var d = moment(iso8601);\n  $('#planner-options-date').val(d.format('MM-DD-YYYY'));\n}\nfunction setTime(iso8601){\n    // if(Modernizr.inputtypes.time){\n    //     $('#planner-options-time').val(iso8601.slice(0,5));\n    // }else{\n      console.log(iso8601)\n         input = moment(iso8601, \"hh:mm a\");\n        // var secs = parseInt(val[0])*60*60+parseInt(val[1])*60;\n        // var hours = String(Math.floor(secs / (60 * 60)) % 24);\n        // var divisor_for_minutes = secs % (60 * 60);\n        // var minutes = String(Math.floor(divisor_for_minutes / 60));\n        console.log(input.format(\"HH:mm\"))\n\n        $('#planner-options-time').val(input.format(\"HH:mm\"));\n    // }\n}\n\nfunction getDate(){\n  return moment($('#planner-options-date').val()).format(\"YYYY-MM-DD\");\n  console.log(elements)\n  var month = currentTime.day();\n  var day = currentTime.month();\n  var year = String(currentTime.year());\n  setDate(year+'-'+month+'-'+day);\n  return year+'-'+month+'-'+day;\n}\nfunction getTime(){\n  var time = moment($('#planner-options-time').val(), \"HH:mm\");\n  return time.format(\"hh:mm a\")\n}\n// Scrolls to anchor tag from subnav link\nfunction scrollToAnchor(aid){\n    console.log(aid)\n    var aTag = $(\"[name='\"+ aid +\"']\");\n    console.log(aTag)\n    $('html,body').animate({scrollTop: aTag.offset().top - 60},'slow');\n}\n\n$(\".nav-sidebar-sub > li > a\").click(function() {\n  console.log($(this).attr('href').split('#')[1])\n   scrollToAnchor($(this).attr('href').split('#')[1]);\n});\n\njQuery.unparam = function (value) {\n  if (value.length > 1 && value.charAt(0) == '#'){\n    value = value.substring(1);\n  }\n  var\n  // Object that holds names => values.\n  params = {},\n  // Get query string pieces (separated by &)\n  pieces = value.split('&'),\n  // Temporary variables used in loop.\n  pair, i, l;\n\n  // Loop through query string pieces and assign params.\n  for (i = 0, l = pieces.length; i < l; i++) {\n    pair = pieces[i].split('=', 2);\n    // Repeated parameters with the same name are overwritten. Parameters\n    // with no value get set to boolean true.\n    params[decodeURIComponent(pair[0])] = (pair.length == 2 ?\n    decodeURIComponent(pair[1].replace(/\\+/g, ' ')) : true);\n  }\n  console.log(params);\n  return params;\n};\n// Extended disable function\njQuery.fn.extend({\n    disable: function(state) {\n        return this.each(function() {\n            var $this = $(this);\n            if($this.is('input, button, a'))\n              this.disabled = state;\n            else\n              $this.toggleClass('disabled', state);\n        });\n    }\n});\nfunction trimHeadsign(headsign){\n\theadsign = headsign.split('-').length > 1 ? headsign.split('-')[1] : headsign;\n  headsign = headsign.split('TO').length > 1 ? headsign.split('TO')[1] : headsign;\n\theadsign = headsign.replace(/STATION/i, '');\n\theadsign = toTitleCase(headsign);\n\treturn headsign;\n}\nfunction cleanStopName(name){\n  name = name\n          .replace(/(@)(?!\\s)/g, ' @ ')\n          .replace(/(\\/)(?!\\s)/g, ' / ')\n          .replace(/STATION/g, '');\n  name = toTitleCase(name);\n  return name;\n\n}\nfunction getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) {\n\tvar R = 6371; // Radius of the earth in km\n\tvar dLat = deg2rad(lat2-lat1);  // deg2rad below\n\tvar dLon = deg2rad(lon2-lon1); \n\tvar a = \n\tMath.sin(dLat/2) * Math.sin(dLat/2) +\n\t\tMath.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n\t\tMath.sin(dLon/2) * Math.sin(dLon/2)\n\t\t; \n\tvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n\tvar d = R * c; // Distance in km\n\treturn d;\n}\nfunction deg2rad(deg) {\n\treturn deg * (Math.PI/180);\n}\nfunction toTitleCase(str) {\n    return str.replace(/\\w\\S*/g, function(txt){\n      if (/LCI|CTP|TDM|CSX|^NW$|^NE$|^SE$|^SW$|MARTA|GWCC|CNN|^FY$|^ARC$|^SR$|^II$|^STP$|^III$|^US$|CMAQ/g.test(txt))\n        return txt\n      else if (/^IN$|^OF$|^AND$|^FOR$/g.test(txt)){\n        return txt.toLowerCase()\n      }\n      else\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n}\nserialize = function(obj, prefix) {\n\tvar str = [];\n\tfor(var p in obj) {\n\t  if (obj.hasOwnProperty(p)) {\n\t    var k = prefix ? prefix + \"[\" + p + \"]\" : p, v = obj[p];\n\t    str.push(typeof v == \"object\" ?\n\t      serialize(v, k) :\n\t      encodeURIComponent(k) + \"=\" + encodeURIComponent(v));\n\t  }\n\t}\n\treturn str.join(\"&\");\n}\nvar bs = findBootstrapEnvironment();\nconsole.log(bs);\nif (bs === 'md' || bs === 'sm'){\n\t$('.agency-arrivals-radio').addClass('btn-xs');\n}"],"sourceRoot":"/source/"}